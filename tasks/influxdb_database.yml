---

- name: '{{ansible_influx_databases[database].name}} - Set database variable'
  set_fact:
    ifx_db: "{{ansible_influx_databases[database]|combine({ 'continuous_query': {} } if ansible_influx_databases[database].continuous_query is not defined else ansible_influx_databases[database].continuous_query )}}"

- debug: var=ifx_db

# some assertions - move to separate file?
- name: "Assert basic DB attributes"
  fail:
    msg: "DB attributes 'name' must be defined!"
  when: ifx_db.name is not defined 

- name: "Assert either 'rp_name' or 'retention_policy' are defined"
  fail:
    msg: "DB attribute 'rp_name' OR 'retention_policy' must be defined!"
  when: ifx_db.rp_name is not defined and ifx_db.retention_policy is not defined

- name: "Assert 'interval' must be defined when 'measurements' are defined"
  fail:
    msg: "DB attribute 'continuous_query.interval' OR 'backfill.interval' must be defined when defining 'measurements'!"
  when: ifx_db.measurements is defined and (
    ifx_db.continuous_query.interval is not defined
    and ifx_db.backfill.interval is not defined)

- name: "Assert backfill settings 'step' and 'source'"
  fail:
    msg: "DB attribute 'backfill.step' and 'backfill.interval' require 'source'!"
  when: ifx_db.backfill is defined and (
    ifx_db.backfill.step is defined or ifx_db.backfill.interval is defined 
    ) and ifx_db.source is not defined

- name: "Assert backfill RP dependency"
  fail:
    msg: "DB attribute 'backfill' requires 'retention_policy' with 'amount' + 'unit'!"
  when: ifx_db.backfill is defined and (
    ifx_db.retention_policy is not defined
    or ifx_db.retention_policy.amount is not defined
    or ifx_db.retention_policy.unit is not defined)

- name: '{{ifx_db.name}} - Set defaults'
  set_fact:
    db_prefix: "{{ifx_db.name}} -"
    ifx_db: "{{ifx_db|combine({ 'rp_name': 'rp_'+ifx_db.retention_policy.amount+ifx_db.retention_policy.unit if ifx_db.rp_name is not defined else ifx_db.rp_name })}}"
    ifx_bf_where: "{{'AND '+ifx_db.continuous_query.where if ifx_db.continuous_query.where is defined else ''}}"
    ifx_cq_where: "{{'WHERE '+ifx_db.continuous_query.where if ifx_db.continuous_query.where is defined else ''}}"
    ifx_cq_groupby: "{{ifx_db.continuous_query.groupby if ifx_db.continuous_query.groupby is defined else ['*']}}"
    # ifx_cq_interval: "{{ifx_db.continuous_query.interval}}"
    ifx_cq_interval: "{{ifx_db.continuous_query.interval 
      if ifx_db.continuous_query is defined and ifx_db.continuous_query.interval is defined else 
        ifx_db.backfill.interval if ifx_db.backfill is defined and ifx_db.backfill.interval is defined else ''
      }}"
    ifx_cq_resample: "{{'RESAMPLE ' if ifx_db.continuous_query.resample is defined else ''}}"
    ifx_cq_resample_every: "{{'EVERY '+ifx_db.continuous_query.resample.every if ifx_db.continuous_query.resample is defined and ifx_db.continuous_query.resample.every is defined else ''}}"
    ifx_cq_resample_for: "{{'FOR '+ifx_db.continuous_query.resample.for if ifx_db.continuous_query.resample is defined and ifx_db.continuous_query.resample.for is defined else ''}}"
    ifx_backfill: "{{ifx_db.backfill|default(false)}}"
    ifx_backfill_stats: "{{ifx_db.backfill.stats|default(false) if ifx_db.backfill is defined else false}}"
    ifx_rp_default: "{{'DEFAULT' if ifx_db.retention_policy is defined and ifx_db.retention_policy.default|default(false) else ''}}"
    mm_backfill_totals: []
    mm_downsampling_totals: []

- name: '{{db_prefix}} Create database'
  uri: url="{{ansible_influx_url}}/query" method=POST body="q=CREATE DATABASE {{ifx_db.name}}" return_content=yes
  when: ifx_db.name not in ifx_dbs
  register: ansible_influx_db_create
  changed_when: ansible_influx_db_create.status == 200 and ansible_influx_db_create.json is defined and ansible_influx_db_create.json.results[0].statement_id == 0

- name: '{{db_prefix}} Get retention policies'
  uri: url="{{ansible_influx_url}}/query?db={{ifx_db.name}}" method=POST body="q=SHOW RETENTION POLICIES" return_content=yes
  when: ansible_influx_db_create is not changed
  register: ansible_influx_rps

- name: '{{db_prefix}} Get SOURCE measurements'
  uri: url="{{ansible_influx_url}}/query?db={{ifx_db.source.name}}" method=POST body="q=SHOW MEASUREMENTS" return_content=yes
  register: ansible_influx_source_mms
  when: ifx_db.source is defined

- name: '{{db_prefix}} Get TARGET measurements'
  uri: url="{{ansible_influx_url}}/query?db={{ifx_db.name}}" method=POST body="q=SHOW MEASUREMENTS" return_content=yes
  register: ansible_influx_mms

- name: '{{db_prefix}} List of retention policies and measurements'
  set_fact:
    ifx_rps: "{{ansible_influx_rps.json.results[0].series[0]['values']|flatten if ansible_influx_db_create is not changed else []}}"
    ifx_mms: "{{ansible_influx_mms.json.results[0].series|default([])|rejectattr('values', 'callable')|map(attribute='values')|flatten}}"
    ifx_source_mms: "{{ansible_influx_source_mms.json.results[0].series|rejectattr('values', 'callable')|map(attribute='values')|flatten if ansible_influx_source_mms.json is defined else []}}"

- name: '{{db_prefix}} Print list of measurements'
  debug: msg="List of measurements on SOURCE = {{ifx_source_mms|join(', ')}}"
  when: ifx_db.source is defined

- name: '{{db_prefix}} Create retention policy {{ifx_db.rp_name}}'
  uri:
    url: "{{ansible_influx_url}}/query?db={{ifx_db.name}}"
    method: POST
    body: >
      q=CREATE RETENTION POLICY "{{ifx_db.rp_name}}" ON "{{ifx_db.name}}"
      DURATION {{ifx_db.retention_policy.amount+ifx_db.retention_policy.unit}} REPLICATION 1 {{ifx_rp_default}}
    return_content: yes
  when: ansible_influx_db_create is changed or (ifx_rps is defined and ifx_db.rp_name not in ifx_rps)
  register: ansible_influx_rp_create
  changed_when: ansible_influx_rp_create.status == 200 and ansible_influx_rp_create.json is defined and ansible_influx_rp_create.json.results[0].statement_id == 0

- name: '{{db_prefix}} Create measurements'
  include_tasks: influxdb_measurement.yml measurement={{mm_item}}
  with_items: "{{ifx_db.measurements|sort}}"
  loop_control: { loop_var: mm_item }
  when: ifx_db.measurements is defined 
    and (recreate_cqs == 'yes' or ansible_influx_db_create is changed or mm_item not in ifx_mms)

- name: '{{db_prefix}} Total data points written'
  debug: msg="Total data points written = {{mm_backfill_totals|map('int')|sum(start=0)}}"
  when: ifx_backfill

- name: '{{db_prefix}} Average series downsampling'
  debug: msg="Average series downsampling = {{ (mm_downsampling_totals|map('float')|sum(start=0) / mm_downsampling_totals|length) |round(2) }} %"
  when: ifx_backfill and mm_downsampling_totals|length > 0

